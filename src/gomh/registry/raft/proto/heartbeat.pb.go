// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heartbeat.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	heartbeat.proto

It has these top-level messages:
	HeartbeatRequest
	HeartbeatResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type HeartbeatRequest struct {
	Host  string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Term  uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	Event string `protobuf:"bytes,3,opt,name=event" json:"event,omitempty"`
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto1.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *HeartbeatRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HeartbeatRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *HeartbeatRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

type HeartbeatResponse struct {
	Respcode uint32 `protobuf:"varint,1,opt,name=respcode" json:"respcode,omitempty"`
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto1.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *HeartbeatResponse) GetRespcode() uint32 {
	if m != nil {
		return m.Respcode
	}
	return 0
}

func init() {
	proto1.RegisterType((*HeartbeatRequest)(nil), "proto.HeartbeatRequest")
	proto1.RegisterType((*HeartbeatResponse)(nil), "proto.HeartbeatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Heartbeat service

type HeartbeatClient interface {
	SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type heartbeatClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeatClient(cc *grpc.ClientConn) HeartbeatClient {
	return &heartbeatClient{cc}
}

func (c *heartbeatClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := grpc.Invoke(ctx, "/proto.Heartbeat/SendHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Heartbeat service

type HeartbeatServer interface {
	SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

func RegisterHeartbeatServer(s *grpc.Server, srv HeartbeatServer) {
	s.RegisterService(&_Heartbeat_serviceDesc, srv)
}

func _Heartbeat_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Heartbeat/SendHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).SendHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heartbeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Heartbeat",
	HandlerType: (*HeartbeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHeartbeat",
			Handler:    _Heartbeat_SendHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heartbeat.proto",
}

func init() { proto1.RegisterFile("heartbeat.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x48, 0x4d, 0x2c,
	0x2a, 0x49, 0x4a, 0x4d, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a,
	0x01, 0x5c, 0x02, 0x1e, 0x30, 0x99, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e,
	0x96, 0x8c, 0xfc, 0xe2, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x1b, 0x24, 0x56,
	0x92, 0x5a, 0x94, 0x2b, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x12, 0x04, 0x66, 0x0b, 0x89, 0x70, 0xb1,
	0xa6, 0x96, 0xa5, 0xe6, 0x95, 0x48, 0x30, 0x83, 0x15, 0x42, 0x38, 0x4a, 0xfa, 0x5c, 0x82, 0x48,
	0x26, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49, 0x71, 0x71, 0x14, 0xa5, 0x16, 0x17, 0x24,
	0xe7, 0xa7, 0xa4, 0x82, 0x8d, 0xe5, 0x0d, 0x82, 0xf3, 0x8d, 0x02, 0xb9, 0x38, 0xe1, 0x1a, 0x84,
	0x5c, 0xb8, 0x78, 0x83, 0x53, 0xf3, 0x52, 0x10, 0x02, 0xe2, 0x10, 0xf7, 0xea, 0xa1, 0xbb, 0x52,
	0x4a, 0x02, 0x53, 0x02, 0x62, 0x99, 0x12, 0x43, 0x12, 0x1b, 0x58, 0xca, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x2d, 0x31, 0xb0, 0x75, 0xf6, 0x00, 0x00, 0x00,
}
